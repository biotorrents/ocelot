--- private/db.h
+++ public/db.h
@@ -17,18 +17,16 @@
                 std::string update_light_peer_buffer;
                 std::string update_snatch_buffer;
                 std::string update_token_buffer;
-                std::string update_peer_hist_buffer;
 
                 std::queue<std::string> user_queue;
                 std::queue<std::string> torrent_queue;
                 std::queue<std::string> peer_queue;
                 std::queue<std::string> snatch_queue;
                 std::queue<std::string> token_queue;
-                std::queue<std::string> peer_hist_queue;
 
                 std::string mysql_db, mysql_host, mysql_username, mysql_password;
-                bool u_active, t_active, p_active, s_active, tok_active, hist_active;
-                bool readonly, disable_peer_history;
+                bool u_active, t_active, p_active, s_active, tok_active;
+                bool readonly;
 
                 // These locks prevent more than one thread from reading/writing the buffers.
                 // These should be held for the minimum time possible.
@@ -38,7 +36,6 @@
                 std::mutex peer_queue_lock;
                 std::mutex snatch_queue_lock;
                 std::mutex token_queue_lock;
-                std::mutex peer_hist_queue_lock;
 
                 void load_config(config * conf);
                 void load_tokens(torrent_list &torrents);
@@ -48,14 +45,12 @@
                 void do_flush_snatches();
                 void do_flush_peers();
                 void do_flush_tokens();
-                void do_flush_peer_hist();
 
                 void flush_users();
                 void flush_torrents();
                 void flush_snatches();
                 void flush_peers();
                 void flush_tokens();
-                void flush_peer_hist();
                 void clear_peer_data();
 
         public:
@@ -74,7 +69,6 @@
                 void record_peer(const std::string &record, const std::string &ip, const std::string &peer_id, const std::string &useragent); // (uid,fid,active,peerid,useragent,ip,uploaded,downloaded,upspeed,downspeed,left,timespent,announces,tstamp)
                 void record_peer(const std::string &record, const std::string &peer_id); // (fid,peerid,timespent,announces,tstamp)
                 void record_token(const std::string &record);
-                void record_peer_hist(const std::string &record, const std::string &peer_id, const int tid);
 
                 void flush();
 
